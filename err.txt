[      clap::builder::command] 	Command::_do_parse
[      clap::builder::command] 	Command::_build: name="viuwa"
[      clap::builder::command] 	Command::_propagate:viuwa
[      clap::builder::command] 	Command::_check_help_and_version:viuwa expand_help_tree=false
[      clap::builder::command] 	Command::long_help_exists
[      clap::builder::command] 	Command::_check_help_and_version: Building default --version
[      clap::builder::command] 	Command::_propagate_global_args:viuwa
[        clap::parser::parser] 	Parser::get_matches_with
[        clap::parser::parser] 	Parser::get_matches_with: Begin parsing 'RawOsStr("--config")' ([45, 45, 99, 111, 110, 102, 105, 103])
[        clap::parser::parser] 	Parser::possible_subcommand: arg=Ok("--config")
[        clap::parser::parser] 	Parser::get_matches_with: sc=None
[        clap::parser::parser] 	Parser::parse_long_arg
[        clap::parser::parser] 	Parser::parse_long_arg: Does it contain '='...
[        clap::parser::parser] 	Parser::parse_long_arg: Found valid arg or flag '--config <FILE>'
[        clap::parser::parser] 	Parser::parse_long_arg("config"): Found an arg with value 'None'
[        clap::parser::parser] 	Parser::parse_opt_value; arg=config, val=None, has_eq=false
[        clap::parser::parser] 	Parser::parse_opt_value; arg.settings=ArgFlags(NO_OP)
[        clap::parser::parser] 	Parser::parse_opt_value; Checking for val...
[        clap::parser::parser] 	Parser::parse_opt_value: More arg vals required...
[        clap::parser::parser] 	Parser::get_matches_with: After parse_long_arg Opt("config")
[        clap::parser::parser] 	Parser::get_matches_with: Begin parsing 'RawOsStr(".\\config.toml")' ([46, 92, 99, 111, 110, 102, 105, 103, 46, 116, 111, 109, 108])
[   clap::parser::arg_matcher] 	ArgMatcher::needs_more_vals: o=config, pending=1
[   clap::parser::arg_matcher] 	ArgMatcher::needs_more_vals: expected=1, actual=1
[        clap::parser::parser] 	Parser::get_matches_with: Begin parsing 'RawOsStr(".\\nasa-4928x3279.png")' ([46, 92, 110, 97, 115, 97, 45, 52, 57, 50, 56, 120, 51, 50, 55, 57, 46, 112, 110, 103])
[        clap::parser::parser] 	Parser::possible_subcommand: arg=Ok(".\\nasa-4928x3279.png")
[        clap::parser::parser] 	Parser::get_matches_with: sc=None
[        clap::parser::parser] 	Parser::get_matches_with: Positional counter...1
[        clap::parser::parser] 	Parser::get_matches_with: Low index multiples...false
[        clap::parser::parser] 	Parser::resolve_pending: id="config"
[        clap::parser::parser] 	Parser::react action=Set, identifier=Some(Long), source=CommandLine
[        clap::parser::parser] 	Parser::react: cur_idx:=1
[        clap::parser::parser] 	Parser::remove_overrides: id="config"
[   clap::parser::arg_matcher] 	ArgMatcher::start_custom_arg: id="config", source=CommandLine
[      clap::builder::command] 	Command::groups_for_arg: id="config"
[   clap::parser::arg_matcher] 	ArgMatcher::start_custom_arg: id="Args", source=CommandLine
[        clap::parser::parser] 	Parser::push_arg_values: [".\\config.toml"]
[        clap::parser::parser] 	Parser::add_single_val_to_arg: cur_idx:=2
[        clap::parser::parser] 	Parser::resolve_pending: id="image"
[        clap::parser::parser] 	Parser::react action=Set, identifier=Some(Index), source=CommandLine
[        clap::parser::parser] 	Parser::remove_overrides: id="image"
[   clap::parser::arg_matcher] 	ArgMatcher::start_custom_arg: id="image", source=CommandLine
[      clap::builder::command] 	Command::groups_for_arg: id="image"
[   clap::parser::arg_matcher] 	ArgMatcher::start_custom_arg: id="Args", source=CommandLine
[        clap::parser::parser] 	Parser::push_arg_values: [".\\nasa-4928x3279.png"]
[        clap::parser::parser] 	Parser::add_single_val_to_arg: cur_idx:=3
[        clap::parser::parser] 	Parser::add_env
[        clap::parser::parser] 	Parser::add_env: Checking arg `--help`
[        clap::parser::parser] 	Parser::add_env: Checking arg `-?`
[        clap::parser::parser] 	Parser::add_env: Skipping existing arg `<FILE>`
[        clap::parser::parser] 	Parser::add_env: Checking arg `--quiet`
[        clap::parser::parser] 	Parser::add_env: Checking arg `--filter <FILTER>`
[        clap::parser::parser] 	Parser::add_env: Checking arg `--color <COLOR>`
[        clap::parser::parser] 	Parser::add_env: Checking arg `--inline`
[        clap::parser::parser] 	Parser::add_env: Found an opt with value="true"
[        clap::parser::parser] 	Parser::react action=SetTrue, identifier=None, source=EnvVariable
[   clap::parser::arg_matcher] 	ArgMatcher::start_custom_arg: id="inline", source=EnvVariable
[      clap::builder::command] 	Command::groups_for_arg: id="inline"
[   clap::parser::arg_matcher] 	ArgMatcher::start_custom_arg: id="Args", source=EnvVariable
[        clap::parser::parser] 	Parser::push_arg_values: ["true"]
[        clap::parser::parser] 	Parser::add_single_val_to_arg: cur_idx:=4
[        clap::parser::parser] 	Parser::add_env: Checking arg `--width <WIDTH>`
[        clap::parser::parser] 	Parser::add_env: Checking arg `--height <HEIGHT>`
[        clap::parser::parser] 	Parser::add_env: Checking arg `--luma-correct <luma-correct>`
[        clap::parser::parser] 	Parser::add_env: Skipping existing arg `--config <FILE>`
[        clap::parser::parser] 	Parser::add_env: Checking arg `--version`
[        clap::parser::parser] 	Parser::add_defaults
[        clap::parser::parser] 	Parser::add_defaults:iter:help:
[        clap::parser::parser] 	Parser::add_default_value: doesn't have conditional defaults
[        clap::parser::parser] 	Parser::add_default_value:iter:help: doesn't have default vals
[        clap::parser::parser] 	Parser::add_defaults:iter:special_help:
[        clap::parser::parser] 	Parser::add_default_value: doesn't have conditional defaults
[        clap::parser::parser] 	Parser::add_default_value:iter:special_help: doesn't have default vals
[        clap::parser::parser] 	Parser::add_defaults:iter:image:
[        clap::parser::parser] 	Parser::add_default_value: doesn't have conditional defaults
[        clap::parser::parser] 	Parser::add_default_value:iter:image: doesn't have default vals
[        clap::parser::parser] 	Parser::add_defaults:iter:quiet:
[        clap::parser::parser] 	Parser::add_default_value: doesn't have conditional defaults
[        clap::parser::parser] 	Parser::add_default_value:iter:quiet: has default vals
[        clap::parser::parser] 	Parser::add_default_value:iter:quiet: wasn't used
[        clap::parser::parser] 	Parser::react action=SetTrue, identifier=None, source=DefaultValue
[   clap::parser::arg_matcher] 	ArgMatcher::start_custom_arg: id="quiet", source=DefaultValue
[        clap::parser::parser] 	Parser::push_arg_values: ["false"]
[        clap::parser::parser] 	Parser::add_single_val_to_arg: cur_idx:=5
[        clap::parser::parser] 	Parser::add_defaults:iter:filter:
[        clap::parser::parser] 	Parser::add_default_value: doesn't have conditional defaults
[        clap::parser::parser] 	Parser::add_default_value:iter:filter: has default vals
[        clap::parser::parser] 	Parser::add_default_value:iter:filter: wasn't used
[        clap::parser::parser] 	Parser::react action=Set, identifier=None, source=DefaultValue
[   clap::parser::arg_matcher] 	ArgMatcher::start_custom_arg: id="filter", source=DefaultValue
[        clap::parser::parser] 	Parser::push_arg_values: ["nearest"]
[        clap::parser::parser] 	Parser::add_single_val_to_arg: cur_idx:=6
[        clap::parser::parser] 	Parser::add_defaults:iter:color:
[        clap::parser::parser] 	Parser::add_default_value: doesn't have conditional defaults
[        clap::parser::parser] 	Parser::add_default_value:iter:color: has default vals
[        clap::parser::parser] 	Parser::add_default_value:iter:color: wasn't used
[        clap::parser::parser] 	Parser::react action=Set, identifier=None, source=DefaultValue
[   clap::parser::arg_matcher] 	ArgMatcher::start_custom_arg: id="color", source=DefaultValue
[        clap::parser::parser] 	Parser::push_arg_values: ["truecolor"]
[        clap::parser::parser] 	Parser::add_single_val_to_arg: cur_idx:=7
[        clap::parser::parser] 	Parser::add_defaults:iter:inline:
[        clap::parser::parser] 	Parser::add_default_value: doesn't have conditional defaults
[        clap::parser::parser] 	Parser::add_default_value:iter:inline: has default vals
[        clap::parser::parser] 	Parser::add_default_value:iter:inline: was used
[        clap::parser::parser] 	Parser::add_defaults:iter:width:
[        clap::parser::parser] 	Parser::add_default_value: doesn't have conditional defaults
[        clap::parser::parser] 	Parser::add_default_value:iter:width: doesn't have default vals
[        clap::parser::parser] 	Parser::add_defaults:iter:height:
[        clap::parser::parser] 	Parser::add_default_value: doesn't have conditional defaults
[        clap::parser::parser] 	Parser::add_default_value:iter:height: doesn't have default vals
[        clap::parser::parser] 	Parser::add_defaults:iter:luma-correct:
[        clap::parser::parser] 	Parser::add_default_value: doesn't have conditional defaults
[        clap::parser::parser] 	Parser::add_default_value:iter:luma-correct: has default vals
[        clap::parser::parser] 	Parser::add_default_value:iter:luma-correct: wasn't used
[        clap::parser::parser] 	Parser::react action=Set, identifier=None, source=DefaultValue
[   clap::parser::arg_matcher] 	ArgMatcher::start_custom_arg: id="luma-correct", source=DefaultValue
[        clap::parser::parser] 	Parser::push_arg_values: ["100"]
[        clap::parser::parser] 	Parser::add_single_val_to_arg: cur_idx:=8
[        clap::parser::parser] 	Parser::add_defaults:iter:config:
[        clap::parser::parser] 	Parser::add_default_value: doesn't have conditional defaults
[        clap::parser::parser] 	Parser::add_default_value:iter:config: doesn't have default vals
[        clap::parser::parser] 	Parser::add_defaults:iter:version:
[        clap::parser::parser] 	Parser::add_default_value: doesn't have conditional defaults
[        clap::parser::parser] 	Parser::add_default_value:iter:version: doesn't have default vals
[     clap::parser::validator] 	Validator::validate
[     clap::parser::validator] 	Validator::validate_conflicts
[     clap::parser::validator] 	Validator::validate_exclusive
[     clap::parser::validator] 	Validator::validate_exclusive:iter:"config"
[     clap::parser::validator] 	Validator::validate_exclusive:iter:"Args"
[     clap::parser::validator] 	Validator::validate_exclusive:iter:"image"
[     clap::parser::validator] 	Validator::validate_exclusive:iter:"inline"
[     clap::parser::validator] 	Validator::validate_conflicts::iter: id="config"
[     clap::parser::validator] 	Conflicts::gather_conflicts: arg="config"
[      clap::builder::command] 	Command::groups_for_arg: id="config"
[     clap::parser::validator] 	Conflicts::gather_direct_conflicts id="config", conflicts=[]
[     clap::parser::validator] 	Conflicts::gather_direct_conflicts id="Args", conflicts=[]
[      clap::builder::command] 	Command::groups_for_arg: id="image"
[     clap::parser::validator] 	Conflicts::gather_direct_conflicts id="image", conflicts=[]
[      clap::builder::command] 	Command::groups_for_arg: id="inline"
[     clap::parser::validator] 	Conflicts::gather_direct_conflicts id="inline", conflicts=[]
[     clap::parser::validator] 	Conflicts::gather_conflicts: conflicts=[]
[     clap::parser::validator] 	Validator::validate_conflicts::iter: id="image"
[     clap::parser::validator] 	Conflicts::gather_conflicts: arg="image"
[     clap::parser::validator] 	Conflicts::gather_conflicts: conflicts=[]
[     clap::parser::validator] 	Validator::validate_conflicts::iter: id="inline"
[     clap::parser::validator] 	Conflicts::gather_conflicts: arg="inline"
[     clap::parser::validator] 	Conflicts::gather_conflicts: conflicts=[]
[     clap::parser::validator] 	Validator::validate_required: required=ChildGraph([Child { id: "image", children: [] }])
[     clap::parser::validator] 	Validator::gather_requires
[     clap::parser::validator] 	Validator::gather_requires:iter:"config"
[     clap::parser::validator] 	Validator::gather_requires:iter:"Args"
[     clap::parser::validator] 	Validator::gather_requires:iter:"Args":group
[     clap::parser::validator] 	Validator::gather_requires:iter:"image"
[     clap::parser::validator] 	Validator::gather_requires:iter:"inline"
[     clap::parser::validator] 	Validator::validate_required: is_exclusive_present=false
[   clap::parser::arg_matcher] 	ArgMatcher::get_global_values: global_arg_vec=[]
[DEBUG] matches: ArgMatches {
    args: FlatMap {
        keys: [
            "config",
            "Args",
            "image",
            "inline",
            "quiet",
            "filter",
            "color",
            "luma-correct",
        ],
        values: [
            MatchedArg {
                source: Some(
                    CommandLine,
                ),
                indices: [
                    2,
                ],
                type_id: Some(
                    TypeId {
                        t: 640608561018775085,
                    },
                ),
                vals: [
                    [
                        AnyValue {
                            inner: TypeId {
                                t: 640608561018775085,
                            },
                        },
                    ],
                ],
                raw_vals: [
                    [
                        ".\\config.toml",
                    ],
                ],
                ignore_case: false,
            },
            MatchedArg {
                source: Some(
                    CommandLine,
                ),
                indices: [],
                type_id: None,
                vals: [
                    [
                        AnyValue {
                            inner: TypeId {
                                t: 3858516631400673602,
                            },
                        },
                    ],
                    [
                        AnyValue {
                            inner: TypeId {
                                t: 3858516631400673602,
                            },
                        },
                    ],
                    [
                        AnyValue {
                            inner: TypeId {
                                t: 3858516631400673602,
                            },
                        },
                    ],
                ],
                raw_vals: [
                    [
                        "config",
                    ],
                    [
                        "image",
                    ],
                    [
                        "inline",
                    ],
                ],
                ignore_case: false,
            },
            MatchedArg {
                source: Some(
                    CommandLine,
                ),
                indices: [
                    3,
                ],
                type_id: Some(
                    TypeId {
                        t: 640608561018775085,
                    },
                ),
                vals: [
                    [
                        AnyValue {
                            inner: TypeId {
                                t: 640608561018775085,
                            },
                        },
                    ],
                ],
                raw_vals: [
                    [
                        ".\\nasa-4928x3279.png",
                    ],
                ],
                ignore_case: false,
            },
            MatchedArg {
                source: Some(
                    EnvVariable,
                ),
                indices: [
                    4,
                ],
                type_id: Some(
                    TypeId {
                        t: 11046744883169582909,
                    },
                ),
                vals: [
                    [
                        AnyValue {
                            inner: TypeId {
                                t: 11046744883169582909,
                            },
                        },
                    ],
                ],
                raw_vals: [
                    [
                        "true",
                    ],
                ],
                ignore_case: false,
            },
            MatchedArg {
                source: Some(
                    DefaultValue,
                ),
                indices: [
                    5,
                ],
                type_id: Some(
                    TypeId {
                        t: 11046744883169582909,
                    },
                ),
                vals: [
                    [
                        AnyValue {
                            inner: TypeId {
                                t: 11046744883169582909,
                            },
                        },
                    ],
                ],
                raw_vals: [
                    [
                        "false",
                    ],
                ],
                ignore_case: false,
            },
            MatchedArg {
                source: Some(
                    DefaultValue,
                ),
                indices: [
                    6,
                ],
                type_id: Some(
                    TypeId {
                        t: 17669019937237587808,
                    },
                ),
                vals: [
                    [
                        AnyValue {
                            inner: TypeId {
                                t: 17669019937237587808,
                            },
                        },
                    ],
                ],
                raw_vals: [
                    [
                        "nearest",
                    ],
                ],
                ignore_case: false,
            },
            MatchedArg {
                source: Some(
                    DefaultValue,
                ),
                indices: [
                    7,
                ],
                type_id: Some(
                    TypeId {
                        t: 4662845220440081796,
                    },
                ),
                vals: [
                    [
                        AnyValue {
                            inner: TypeId {
                                t: 4662845220440081796,
                            },
                        },
                    ],
                ],
                raw_vals: [
                    [
                        "truecolor",
                    ],
                ],
                ignore_case: false,
            },
            MatchedArg {
                source: Some(
                    DefaultValue,
                ),
                indices: [
                    8,
                ],
                type_id: Some(
                    TypeId {
                        t: 18349839772473174998,
                    },
                ),
                vals: [
                    [
                        AnyValue {
                            inner: TypeId {
                                t: 18349839772473174998,
                            },
                        },
                    ],
                ],
                raw_vals: [
                    [
                        "100",
                    ],
                ],
                ignore_case: false,
            },
        ],
    },
    subcommand: None,
}
DEBUG: config found quiet: Boolean(
    true,
)
