pub fn rgb_to_256([r, g, b]: [u8; 3]) -> u8 {
        if r == g && g == b {
                return GREY_TO_256[r as usize];
        }
        // is this the best way?
        return 16
                + ((((r as f32 / 255.0) * 5.0).round() as u8) * 36)
                + ((((g as f32 / 255.0) * 5.0).round() as u8) * 6)
                + (((b as f32 / 255.0) * 5.0).round() as u8);
}
pub fn set_fg24_grey(g: u8) -> String { format!(csi!("38;2;{};{};{}m"), g, g, g) }
pub fn set_bg24_grey(g: u8) -> String { format!(csi!("48;2;{};{};{}m"), g, g, g) }
pub fn set_fg24_color([r, g, b]: [u8; 3]) -> String { format!(csi!("38;2;{};{};{}m"), r, g, b) }
pub fn set_bg24_color([r, g, b]: [u8; 3]) -> String { format!(csi!("48;2;{};{};{}m"), r, g, b) }
pub fn set_fg8(c: u8) -> String { format!(csi!("38;5;{}m"), c) }
pub fn set_bg8(c: u8) -> String { format!(csi!("48;5;{}m"), c) }
/// courtesy of ansi-colours https://github.com/mina86/ansi_colours go check them out!
    #[rustfmt::skip]
    pub static GREY_TO_256: [u8; 256] = [
            16,  16,  16,  16,  16, 232, 232, 232,
            232, 232, 232, 232, 232, 232, 233, 233,
            233, 233, 233, 233, 233, 233, 233, 233,
            234, 234, 234, 234, 234, 234, 234, 234,
            234, 234, 235, 235, 235, 235, 235, 235,
            235, 235, 235, 235, 236, 236, 236, 236,
            236, 236, 236, 236, 236, 236, 237, 237,
            237, 237, 237, 237, 237, 237, 237, 237,
            238, 238, 238, 238, 238, 238, 238, 238,
            238, 238, 239, 239, 239, 239, 239, 239,
            239, 239, 239, 239, 240, 240, 240, 240,
            240, 240, 240, 240,  59,  59,  59,  59,
            59, 241, 241, 241, 241, 241, 241, 241,
            242, 242, 242, 242, 242, 242, 242, 242,
            242, 242, 243, 243, 243, 243, 243, 243,
            243, 243, 243, 244, 244, 244, 244, 244,
            244, 244, 244, 244, 102, 102, 102, 102,
            102, 245, 245, 245, 245, 245, 245, 246,
            246, 246, 246, 246, 246, 246, 246, 246,
            246, 247, 247, 247, 247, 247, 247, 247,
            247, 247, 247, 248, 248, 248, 248, 248,
            248, 248, 248, 248, 145, 145, 145, 145,
            145, 249, 249, 249, 249, 249, 249, 250,
            250, 250, 250, 250, 250, 250, 250, 250,
            250, 251, 251, 251, 251, 251, 251, 251,
            251, 251, 251, 252, 252, 252, 252, 252,
            252, 252, 252, 252, 188, 188, 188, 188,
            188, 253, 253, 253, 253, 253, 253, 254,
            254, 254, 254, 254, 254, 254, 254, 254,
            254, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 231,
            231, 231, 231, 231, 231, 231, 231, 231,
    ];
